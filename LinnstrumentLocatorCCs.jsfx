desc: Linnstrument filter notes by location (top row = row #1)
// this code assumes the linnstrument is sending out a locator CC with each note-on
// It also assumes one-channel mode is not used

slider1:1<1,16> Lowest midi channel to listen to
slider2:8<1,16> Highest midi channel to listen to

slider4:30<0,119,1> Locator CC for columns 1-16
slider5:31<0,119,1> Locator CC for columns 17-25

slider7:1<1,25,1> Leftmost column of rectangle
slider8:25<1,25,1> Rightmost column of rectangle
slider9:1<1,8,1> Topmost row of rectangle
slider10:8<1,8,1> Bottommost row of rectangle
slider11:2<0,2,1{ inside the rectangle, outside the rectangle, both inside and outside, neither inside nor outside}> Pass through all other midi?

slider13:0<0,6,1{ pass through the note unaltered (no transposition or transformation), transpose the note to a specific note set below (good for drum pads), transform the note into a CC with CC number = the original note number and CC value = the original note velocity, transform the note into a CC with CC number = the original note number and CC value = a specific value set below, transform the note into a CC with CC number = a specific number set below and CC value = the original note number, transform the note into a CC with CC number = a specific number set below and CC value = the original note velocity, transform the note into a CC with CC number = a specific number set below and CC value = a specific value set below}> Transposing / transforming options
slider14:60<0, 127, 1> Specific note to transpose to
slider15:0<-2, 127, 1> Specific CC message to transform into
slider16:64<-2, 127, 1}> Specific CC value
slider17:0<0, 2, 1{ no CC message, CC value is always 0, handle CC value the same way as a note-on}> Options for a transformed note-off

slider20:1<0,1,1{ Yes, No}> Pass through original locator CC?
 
 
@init
noteOn = 9*16;
noteOff = 8*16;
CCmsg = 11*16;
bend = 14*16;


@slider
wantOutside = (slider11 == 1);
wantAll = slider11 == 2;
specificNote = slider14;
specificCCnum = slider15;
specificCCval = slider16;
passLocatorCC = slider20 == 0;

@block

while (midirecv(mpos, msg1, msg2, msg3)) (

  status = msg1 & $xF0; 
  channel = msg1 & $x0F;
  channel >= slider1 - 1 && channel <= slider2 - 1 ? (
  
    status == noteOn || status == noteOff ? (
      msg1A = msg1; msg2A= msg2; msg3A = msg3;           // store the note-on or note-off for later
      mposA = mpos; statusA = status; channelA = channel;
    ) : 
    
    status == CCmsg && channel == channelA && (msg2 == slider4 || msg2 == slider5) ? (
    
      row = (msg3 & 7) + 1; 
      col = msg3 >> 3 + 1;
      msg2 == slider5 ? col += 16;
      isInside = col >= slider7 && col <= slider8 && row >= slider9 && row <= slider10;
      
      passNote = (isInside + wantOutside == 1);          // add booleans together for a klugey xor
      passNote |= wantAll;
      
      isInside ? (                                       // only transform/transpose if inside
        slider13 == 1 ? (
          msg2A = specificNote;
        ) : slider13 >= 2 ? (
          msg1A = CCmsg + channelA;
          slider13 == 3 ? msg3A = specificCCval;
          slider13 == 4 ? (msg3A = msg2A; msg2A = specificCCnum);
          slider13 == 5 ? msg2A = specificCCnum;
          slider13 == 6 ? (msg2A = specificCCnum; msg3A = specificCCval);
          statusA == CCmsg ? (
            slider17 == 0 ? passNote = false;
            slider17 == 1 ? msg3A = 0;
          );
        );
      );
      
      passNote ? (
        // old way, uses mposA in the midisend
        //mposA > mpos ? mposA = 0;                      // in case the CC arrives in the following sample block
        midisend(mpos, msg1A, msg2A, msg3A);             // use mpos not mposA for a specific delay, avoids midi jitter
      );
      
      passLocatorCC ? midisend(mpos, msg1, msg2, msg3);
      
    ) : 
    
    midisend(mpos, msg1, msg2, msg3);                  // if not note-on or note-off or locator CC, pass it thru 

    
  );  // end of if channel in our range, don't pass through midi outside the range
);    // end of while midirecv
